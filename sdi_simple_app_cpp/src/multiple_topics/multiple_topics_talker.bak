#include <cstdio>
#include <memory>
#include <utility>

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_components/register_node_macro.hpp"

#include "std_msgs/msg/string.hpp"

#include "sdi_simple_app_cpp/visibility_control.h"

using namespace std::chrono_literals;

namespace sdi_simple_app_cpp
{
class MultipleTopicsTalker: public rclcpp::Node
{
public:
  DEMO_NODES_CPP_PUBLIC
  explicit MultipleTopicsTalker(const rclcpp::NodeOptions & options)
  : Node("multiple_topics_talker", options)
  {
    setvbuf(stdout, NULL, _IONBF, BUFSIZ);
    auto publish_message =
      [this]() -> void
      {
        msg_ = std::make_unique<std_msgs::msg::String>();
        msg_->data = "Hello World: " + std::to_string(count_++);
        RCLCPP_INFO(this->get_logger(), "Publishing: '%s'", msg_->data.c_str());
        pub1_->publish(std::move(msg_));
        pub2_->publish(std::move(msg_));
      };

    rclcpp::QoS qos(rclcpp::KeepLast{7});
    pub1_ = this->create_publisher<std_msgs::msg::String>("chatter1", qos);
    pub2_ = this->create_publisher<std_msgs::msg::String>("chatter2", qos);

    // Use a timer to schedule periodic message publishing.
    timer_ = this->create_wall_timer(1s, publish_message);
  }

private:
  size_t count_ = 1;
  std::unique_ptr<std_msgs::msg::String> msg_;
  rclcpp::Publisher<std_msgs::msg::String>::SharedPtr pub1_;
  rclcpp::Publisher<std_msgs::msg::String>::SharedPtr pub2_;
  rclcpp::TimerBase::SharedPtr timer_;
};

}  // namespace sdi_simple_app_cpp

RCLCPP_COMPONENTS_REGISTER_NODE(sdi_simple_app_cpp::MultipleTopicsTalker)

